{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport { ActionSheetIOS } from \"react-native-web/dist/index\";\nimport { CameraRoll } from \"react-native-web/dist/index\";\nimport { ImagePickerIOS } from \"react-native-web/dist/index\";\nvar ImagePicker = {\n  open: function open(config) {\n    return new Promise(function (resolve, reject) {\n      var asOptions = [];\n      var buttons = [];\n      config = config || {};\n      config.cancelTitle = config.cancelTitle || 'Cancel';\n      asOptions.push(config.cancelTitle);\n      buttons.push('cancel');\n      addButton('takePhoto', {\n        title: 'Take Photo',\n        saveToCameraRoll: true,\n        config: {}\n      });\n      addButton('useLastPhoto', {\n        title: 'Use last photo',\n        config: {\n          first: 1\n        }\n      });\n      addButton('chooseFromLibrary', {\n        title: 'Choose from library',\n        config: {}\n      });\n      ActionSheetIOS.showActionSheetWithOptions({\n        options: asOptions,\n        cancelButtonIndex: 0\n      }, function (index) {\n        var actionId = buttons[index];\n        var buttonCfg = config[actionId];\n\n        switch (actionId) {\n          case 'takePhoto':\n            ImagePicker.openCameraDialog(buttonCfg).then(resolve, reject);\n            break;\n\n          case 'useLastPhoto':\n            CameraRoll.getPhotos(buttonCfg.config).then(function (response) {\n              var lastPhoto = response.edges[0];\n\n              if (lastPhoto) {\n                var image = lastPhoto.node.image;\n                resolve({\n                  uri: image.uri,\n                  height: image.height,\n                  width: image.width\n                });\n              } else {\n                reject('NO_PHOTOS');\n              }\n            }, reject);\n            break;\n\n          case 'chooseFromLibrary':\n            ImagePicker.openSelectDialog(buttonCfg).then(resolve, reject);\n            break;\n\n          default:\n            reject();\n            break;\n        }\n      });\n\n      function addButton(id, defaults) {\n        var button = config[id];\n\n        if (button) {\n          var type = typeof button;\n\n          if (type === 'string') {\n            button = {\n              title: button\n            };\n          } else if (type !== 'object') {\n            button = {};\n          }\n\n          button = _extends(defaults, button);\n          config[id] = button;\n          asOptions.push(button.title);\n          buttons.push(id);\n        }\n      }\n    });\n  },\n  openCameraDialog: function openCameraDialog() {\n    var cameraDialogConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return new Promise(function (resolve, reject) {\n      ImagePickerIOS.canUseCamera(function (response) {\n        if (response) {\n          ImagePickerIOS.openCameraDialog(cameraDialogConfig.config || {}, function (uri, height, width) {\n            if (cameraDialogConfig.saveToCameraRoll) {\n              CameraRoll.saveToCameraRoll(uri);\n            }\n\n            resolve({\n              uri: uri,\n              height: height,\n              width: width\n            });\n          }, reject);\n        } else {\n          reject('CAMERA_UNAVAILABLE');\n        }\n      });\n    });\n  },\n  openSelectDialog: function openSelectDialog(selectDialogConfig) {\n    return new Promise(function (resolve, reject) {\n      ImagePickerIOS.openSelectDialog(selectDialogConfig.config || {}, function (uri, height, width) {\n        resolve({\n          uri: uri,\n          height: height,\n          width: width\n        });\n      }, reject);\n    });\n  }\n};\nexport default ImagePicker;","map":{"version":3,"sources":["C:/Users/Activants46/Desktop/added/KhazanahMobileApp/node_modules/react-native-imagepicker/index.ios.js"],"names":["ActionSheetIOS","CameraRoll","ImagePickerIOS","ImagePicker","open","config","Promise","resolve","reject","asOptions","buttons","cancelTitle","push","addButton","title","saveToCameraRoll","first","showActionSheetWithOptions","options","cancelButtonIndex","index","actionId","buttonCfg","openCameraDialog","then","getPhotos","response","lastPhoto","edges","image","node","uri","height","width","openSelectDialog","id","defaults","button","type","cameraDialogConfig","canUseCamera","selectDialogConfig"],"mappings":"AAAA;;;SAGIA,c;SACAC,U;SACAC,c;AAGJ,IAAMC,WAAW,GAAG;AAuBhBC,EAAAA,IAvBgB,gBAuBXC,MAvBW,EAuBH;AACT,WAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC1C,UAAMC,SAAS,GAAG,EAAlB;AACA,UAAMC,OAAO,GAAG,EAAhB;AAGAL,MAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;AAEAA,MAAAA,MAAM,CAACM,WAAP,GAAqBN,MAAM,CAACM,WAAP,IAAsB,QAA3C;AACAF,MAAAA,SAAS,CAACG,IAAV,CAAeP,MAAM,CAACM,WAAtB;AACAD,MAAAA,OAAO,CAACE,IAAR,CAAa,QAAb;AAEAC,MAAAA,SAAS,CAAC,WAAD,EAAc;AACnBC,QAAAA,KAAK,EAAE,YADY;AAEnBC,QAAAA,gBAAgB,EAAE,IAFC;AAGnBV,QAAAA,MAAM,EAAE;AAHW,OAAd,CAAT;AAMAQ,MAAAA,SAAS,CAAC,cAAD,EAAiB;AACtBC,QAAAA,KAAK,EAAE,gBADe;AAEtBT,QAAAA,MAAM,EAAE;AAACW,UAAAA,KAAK,EAAE;AAAR;AAFc,OAAjB,CAAT;AAKAH,MAAAA,SAAS,CAAC,mBAAD,EAAsB;AAC3BC,QAAAA,KAAK,EAAE,qBADoB;AAE3BT,QAAAA,MAAM,EAAE;AAFmB,OAAtB,CAAT;AAKAL,MAAAA,cAAc,CAACiB,0BAAf,CAA0C;AACtCC,QAAAA,OAAO,EAAET,SAD6B;AAEtCU,QAAAA,iBAAiB,EAAE;AAFmB,OAA1C,EAGG,UAACC,KAAD,EAAW;AACV,YAAMC,QAAQ,GAAGX,OAAO,CAACU,KAAD,CAAxB;AACA,YAAME,SAAS,GAAGjB,MAAM,CAACgB,QAAD,CAAxB;;AAEA,gBAAQA,QAAR;AACI,eAAK,WAAL;AACIlB,YAAAA,WAAW,CAACoB,gBAAZ,CAA6BD,SAA7B,EAAwCE,IAAxC,CAA6CjB,OAA7C,EAAsDC,MAAtD;AACA;;AAEJ,eAAK,cAAL;AACIP,YAAAA,UAAU,CAACwB,SAAX,CAAqBH,SAAS,CAACjB,MAA/B,EACKmB,IADL,CACU,UAAUE,QAAV,EAAoB;AACtB,kBAAMC,SAAS,GAAGD,QAAQ,CAACE,KAAT,CAAe,CAAf,CAAlB;;AACA,kBAAID,SAAJ,EAAe;AACX,oBAAME,KAAK,GAAGF,SAAS,CAACG,IAAV,CAAeD,KAA7B;AACAtB,gBAAAA,OAAO,CAAC;AACJwB,kBAAAA,GAAG,EAAEF,KAAK,CAACE,GADP;AAEJC,kBAAAA,MAAM,EAAEH,KAAK,CAACG,MAFV;AAGJC,kBAAAA,KAAK,EAAEJ,KAAK,CAACI;AAHT,iBAAD,CAAP;AAKH,eAPD,MAOO;AACHzB,gBAAAA,MAAM,CAAC,WAAD,CAAN;AACH;AACJ,aAbL,EAcIA,MAdJ;AAeA;;AAEJ,eAAK,mBAAL;AACIL,YAAAA,WAAW,CAAC+B,gBAAZ,CAA6BZ,SAA7B,EAAwCE,IAAxC,CAA6CjB,OAA7C,EAAsDC,MAAtD;AACA;;AAEJ;AACIA,YAAAA,MAAM;AACN;AA7BR;AA+BH,OAtCD;;AAwCA,eAASK,SAAT,CAAmBsB,EAAnB,EAAuBC,QAAvB,EAAiC;AAC7B,YAAIC,MAAM,GAAGhC,MAAM,CAAC8B,EAAD,CAAnB;;AACA,YAAIE,MAAJ,EAAY;AAGR,cAAMC,IAAI,GAAG,OAAOD,MAApB;;AACA,cAAIC,IAAI,KAAK,QAAb,EAAuB;AACnBD,YAAAA,MAAM,GAAG;AACLvB,cAAAA,KAAK,EAAEuB;AADF,aAAT;AAIH,WALD,MAKO,IAAIC,IAAI,KAAK,QAAb,EAAuB;AAC1BD,YAAAA,MAAM,GAAG,EAAT;AACH;;AAEDA,UAAAA,MAAM,GAAG,SAAcD,QAAd,EAAwBC,MAAxB,CAAT;AACAhC,UAAAA,MAAM,CAAC8B,EAAD,CAAN,GAAaE,MAAb;AAEA5B,UAAAA,SAAS,CAACG,IAAV,CAAeyB,MAAM,CAACvB,KAAtB;AACAJ,UAAAA,OAAO,CAACE,IAAR,CAAauB,EAAb;AACH;AACJ;AAEJ,KA1FM,CAAP;AA2FH,GAnHe;AA4HhBZ,EAAAA,gBA5HgB,8BA4H0B;AAAA,QAAzBgB,kBAAyB,uEAAJ,EAAI;AACtC,WAAO,IAAIjC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCN,MAAAA,cAAc,CAACsC,YAAf,CAA4B,UAACd,QAAD,EAAc;AACtC,YAAIA,QAAJ,EAAc;AACVxB,UAAAA,cAAc,CAACqB,gBAAf,CAAgCgB,kBAAkB,CAAClC,MAAnB,IAA6B,EAA7D,EAAiE,UAAC0B,GAAD,EAAMC,MAAN,EAAcC,KAAd,EAAwB;AACrF,gBAAIM,kBAAkB,CAACxB,gBAAvB,EAAyC;AACrCd,cAAAA,UAAU,CAACc,gBAAX,CAA4BgB,GAA5B;AACH;;AAEDxB,YAAAA,OAAO,CAAC;AAAEwB,cAAAA,GAAG,EAAHA,GAAF;AAAOC,cAAAA,MAAM,EAANA,MAAP;AAAeC,cAAAA,KAAK,EAALA;AAAf,aAAD,CAAP;AACH,WAND,EAMGzB,MANH;AAOH,SARD,MAQO;AACHA,UAAAA,MAAM,CAAC,oBAAD,CAAN;AACH;AACJ,OAZD;AAaH,KAdM,CAAP;AAeH,GA5Ie;AAoJhB0B,EAAAA,gBApJgB,4BAoJCO,kBApJD,EAoJqB;AACjC,WAAO,IAAInC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCN,MAAAA,cAAc,CAACgC,gBAAf,CAAgCO,kBAAkB,CAACpC,MAAnB,IAA6B,EAA7D,EAAiE,UAAC0B,GAAD,EAAMC,MAAN,EAAcC,KAAd,EAAwB;AACrF1B,QAAAA,OAAO,CAAC;AAAEwB,UAAAA,GAAG,EAAHA,GAAF;AAAOC,UAAAA,MAAM,EAANA,MAAP;AAAeC,UAAAA,KAAK,EAALA;AAAf,SAAD,CAAP;AACH,OAFD,EAEGzB,MAFH;AAGH,KAJM,CAAP;AAKH;AA1Je,CAApB;AA8JA,eAAeL,WAAf","sourcesContent":["'use strict';\n\nimport {\n    ActionSheetIOS,\n    CameraRoll,\n    ImagePickerIOS\n} from 'react-native';\n\nconst ImagePicker = {\n\n    /**\n     * Opens ActionSheetIOS to select further action (take photo, choose last photo, choose from library).\n     *\n     * @param {object} config\n     * @param {string} [config.cancelTitle=\"Cancel\"] Cancel button title\n     *\n     * @param {object|boolean|string} [config.takePhoto] \"Take photo\" button config. False to disable this button.\n     * @param {string} [config.takePhoto.title=\"Take photo\"] Button title.\n     * @param {string} [config.takePhoto.saveToCameraRoll=true] Save photo to Camera roll.\n     * @param {string} [config.takePhoto.config={}] Config objects passed to ImagePickerIOS.openCameraDialog().\n     *\n     * @param {object|boolean|string} [config.useLastPhoto] \"Use last photo\" button config. False to disable this button.\n     * @param {string} [config.useLastPhoto.title=\"Take photo\"] Button title.\n     * @param {object} [config.useLastPhoto.config={first: 1}] Config objects passed to CameraRoll.getPhotos().\n     *\n     * @param {object|boolean|string} [config.chooseFromLibrary] \"Choose from library\" button config. False to disable this button.\n     * @param {string} [config.chooseFromLibrary.title=\"Choose from library\"] Button title.\n     * @param {object} [config.chooseFromLibrary.config={}] Config objects passed to ImagePickerIOS.openSelectDialog().\n     *\n     * @returns {Promise}\n     */\n    open(config) {\n        return new Promise(function (resolve, reject) {\n            const asOptions = [];\n            const buttons = [];\n\n            // extend config with defaults\n            config = config || {};\n\n            config.cancelTitle = config.cancelTitle || 'Cancel';\n            asOptions.push(config.cancelTitle);\n            buttons.push('cancel');\n\n            addButton('takePhoto', {\n                title: 'Take Photo',\n                saveToCameraRoll: true,\n                config: {}\n            });\n\n            addButton('useLastPhoto', {\n                title: 'Use last photo',\n                config: {first: 1}\n            });\n\n            addButton('chooseFromLibrary', {\n                title: 'Choose from library',\n                config: {}\n            });\n\n            ActionSheetIOS.showActionSheetWithOptions({\n                options: asOptions,\n                cancelButtonIndex: 0\n            }, (index) => {\n                const actionId = buttons[index];\n                const buttonCfg = config[actionId];\n\n                switch (actionId) {\n                    case 'takePhoto':\n                        ImagePicker.openCameraDialog(buttonCfg).then(resolve, reject);\n                        break;\n\n                    case 'useLastPhoto':\n                        CameraRoll.getPhotos(buttonCfg.config)\n                            .then(function (response) {\n                                const lastPhoto = response.edges[0];\n                                if (lastPhoto) {\n                                    const image = lastPhoto.node.image;\n                                    resolve({\n                                        uri: image.uri,\n                                        height: image.height,\n                                        width: image.width,\n                                    });\n                                } else {\n                                    reject('NO_PHOTOS');\n                                }\n                            },\n                            reject);\n                        break;\n\n                    case 'chooseFromLibrary':\n                        ImagePicker.openSelectDialog(buttonCfg).then(resolve, reject);\n                        break;\n\n                    default:\n                        reject();\n                        break;\n                }\n            });\n\n            function addButton(id, defaults) {\n                let button = config[id];\n                if (button) {\n\n                    // cast to object\n                    const type = typeof button;\n                    if (type === 'string') {\n                        button = {\n                            title: button\n                        };\n\n                    } else if (type !== 'object') {\n                        button = {};\n                    }\n\n                    button = Object.assign(defaults, button);\n                    config[id] = button;\n\n                    asOptions.push(button.title);\n                    buttons.push(id);\n                }\n            }\n\n        });\n    },\n\n    /**\n     * Open camera dialog with ImagePickerIOS.openCameraDialog().\n     * @param {object} [cameraDialogConfig={}] Config.\n     * @param {string} [cameraDialogConfig.saveToCameraRoll=false] Save photo to Camera roll.\n     * @param {string} [cameraDialogConfig.config={}] Config objects passed to ImagePickerIOS.openCameraDialog().\n     * @returns {Promise}\n     */\n    openCameraDialog(cameraDialogConfig = {}) {\n        return new Promise((resolve, reject) => {\n            ImagePickerIOS.canUseCamera((response) => {\n                if (response) {\n                    ImagePickerIOS.openCameraDialog(cameraDialogConfig.config || {}, (uri, height, width) => {\n                        if (cameraDialogConfig.saveToCameraRoll) {\n                            CameraRoll.saveToCameraRoll(uri);\n                        }\n\n                        resolve({ uri, height, width });\n                    }, reject);\n                } else {\n                    reject('CAMERA_UNAVAILABLE');\n                }\n            });\n        });\n    },\n\n    /**\n     * Open select dialog with ImagePickerIOS.openSelectDialog().\n     * @param {object} [selectDialogConfig={}] Config.\n     * @param {string} [selectDialogConfig.config={}] Config objects passed to ImagePickerIOS.openSelectDialog().\n     * @returns {Promise}\n     */\n    openSelectDialog(selectDialogConfig) {\n        return new Promise((resolve, reject) => {\n            ImagePickerIOS.openSelectDialog(selectDialogConfig.config || {}, (uri, height, width) => {\n                resolve({ uri, height, width });\n            }, reject);\n        });\n    },\n\n};\n\nexport default ImagePicker;\n"]},"metadata":{},"sourceType":"module"}